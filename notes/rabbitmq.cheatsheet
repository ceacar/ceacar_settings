#python code for rabbit mq


#sender side
#!/usr/bin/env python
import pika

connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()
#declare channel to let rabbitmq know there is a channel called 'hello'
#channel.queue_declare(queue='hello', durable=True) <--- use this cmd if you wan to make queue saved on harddrive, so when rabbitmq crash it won't lose it
channel.queue_declare(queue='hello')
#now publish feed
channel.basic_publish(exchange='',
                      routing_key='hello',
                      body='Hello World!')
print(" [x] Sent 'Hello World!'")
connection.close()



#receiver side

channel.queue_declare(queue='hello')
#this callback is used as a callback for subscribing to queeu
def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)
#now use callback to subscribe, when a message is delivered from rabbitmq, app knows to call callback 
channel.basic_consume(callback,
                      queue='hello',
                      no_ack=True)
print(' [*] Waiting for messages. To exit press CTRL+C')
#now run this app in never ending loop by start_comsuming 
channel.start_consuming()



#receiver callback with an ack
def callback(ch, method, properties, body):
    print " [x] Received %r" % (body,)
    time.sleep( body.count('.') )
    print " [x] Done"
    ch.basic_ack(delivery_tag = method.delivery_tag) #<-- this ack rabbitmq

channel.basic_consume(callback,
                      queue='hello')


#sudo rabbitmqctl list_queues --> this cmd checks how many messages are in rabbitmq right now

#debug rabbitmq unacked message
sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged
