>>>>debian:

#troubleshoot a hanging process
strace -p [PID] #this will print out the recent stack
#for example a python program with a while loop and sleep statement:
  #Process 27528 attached
  #select(0, NULL, NULL, NULL, {0, 112076}) = 0 (Timeout)
  #select(0, NULL, NULL, NULL, {1, 0})     = 0 (Timeout) #select(0, NULL, NULL, NULL, {1, 0})     = 0 (Timeout)
#so 





#gbd debugs c tool and can attach to process with pid
$ sleep 999 & 
[1] 17340
$ gdb -p 17340 /bin/sleep 
Reading symbols from /bin/sleep...(no debugging symbols found)...done.
Attaching to program: /usr/bin/sleep, process 17340
Missing separate debuginfos, use: dnf debuginfo-install coreutils-8.24-8.fc23.x86_64
(gdb) bt
#0  0x00007fb84f43d510 in __nanosleep_nocancel () from /lib64/libc.so.6
#1  0x0000562be81da29f in rpl_nanosleep ()
#2  0x0000562be81da100 in xnanosleep ()
#3  0x0000562be81d7a1d in main ()
(gdb) detach
Detaching from program: /usr/bin/sleep, process 17340
(gdb) quit



# this disables interactive mode of apt-get
DEBIAN_FRONTEND='noninteractive'

# list all service
service --status-all

# start a service
service cassandra start

# stop a service
service cassandra stop

# check resource limit
ulimit -Ha # list all hardware resource limit
ulimit -Sa # list all software resource limit

ulimit -l unlimited # set memory this user can lock to be unlimited
ulimit -f # set max file can be opened

# looks like ubuntu 1804 has auto update function, if in hurry to apt-get install some app, just disable them
systemctl disable apt-daily.timer
systemctl disable apt-daily-upgrade.timer

# login into terminal mode
ctrl + alt + f3

# shutdown immediately
shutdown -r now

# reinstall python any version
wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz
# At the time of writing this article, the latest release is 3.7.4.
# Once the download is complete, extract the gzipped tarball:
tar -xf Python-3.7.4.tgz
# Next, navigate to the Python source directory and run the configure script which will perform a number of checks to make sure all of the dependencies on your system are present:
cd Python-3.7.4
./configure --enable-optimizations
# The --enable-optimizations option will optimize the Python binary by running multiple tests. This makes the build process slower.
# Start the Python build process using make:
make -j 8
# For faster build time, modify the -j flag according to your processor. If you do not know the number of cores your processor, you can find it by typing nproc. The system used in this guide has 8 cores, so we are using the -j8 flag.
# When the build is done, install the Python binaries by running the following command:
sudo make altinstall


#python3.7 has pkg resource issue
wget https://bootstrap.pypa.io/ez_setup.py -O - | python




# set root password
sudo passwd root
