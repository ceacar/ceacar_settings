#!/bin/bash

#get script name
script_name=`basename "$0"`

#get all argument except the last
length=$(($#-1))
array=${@:1:$length}

#split argument for first n-1 and last 1
function run_and_memo(){ local length=$(($#-1))
  local array=${@:1:$length}
  local cmd_to_run=$(echo $array)
  local cmd2="${@: -1}"
  #echo "$cmd_to_run"
  $cmd_to_run
  $cmd2
}

 #file descriptor as a output file
exec 3>> output.txt
echo "f1"
echo >&2 "f2"
echo "f3" >&3
echo "f4" >&3



#run cmd under other user
su -l -s /bin/sh fbd -c 'pwd'


#get dates
date +%Y%m%d -d "-1 days"

# get year of above date string
dt=$(date +%Y%m%d -d "-1 days")
year=${dt:0:2} # starting from 0th position and take two characters after the position

#parallel syntax
parallel --retries 5 -j $(nproc) --halt=2 --block $your_chunk_size --pipe $cmd
#trap
trap 'echo "job error"' ERR #will echo when job errored
trap 'echo "job error"' EXIT #will echo regardless what is the exit status


#find ip address of host
hostname -I

#fix the issue tmux not connected to the old same agent when reconnect
#create ~/.ssh/rc if it doesn't exist yet, and add the following content:'
#!/bin/bash

# Fix SSH auth socket location so agent forwarding works with tmux
if test "$SSH_AUTH_SOCK" ; then
  ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
fi
#Make it work in tmux, add this to your ~/.tmux.conf:
# fix ssh agent when tmux is detached
setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock


#mac git clone need to enter password everytime, no key added to ssh-agent
  #Start the ssh-agent in the background.
  eval "$(ssh-agent -s)"
  #Agent pid 59566
  #If you're using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain.
  Host *
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile ~/.ssh/id_rsa

  #Add your SSH private key to the ssh-agent and store your passphrase in the keychain. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file.
  ssh-add -K ~/.ssh/id_rsa



#curl cheats
#POST request with data
curl --request POST --data 'key1=value1' --data 'key2=value2' url
#With fields:
curl --data "param1=value1&param2=value2" https://example.com/resource.cgi
#With fields specified individually:
curl --data "param1=value1" --data "param2=value2" https://example.com/resource.cgi
#Multipart:
curl --form "fileupload=@my-file.txt" https://example.com/resource.cgi
#Multipart with fields and a filename:
curl --form "fileupload=@my-file.txt;filename=desired-filename.txt" --form param1=value1 --form param2=value2 https://example.com/resource.cgi
#Without data:
curl --data '' https://example.com/resource.cgi
curl -X POST https://example.com/resource.cgi
curl --request POST https://example.com/resource.cgi
# curl and post data from file
curl -XPUT http://lga-grid256.contextweb.prod:9200/test_index-H "Content-Type: application/json" -d @/data/data/com.termux/files/home/temp/elk.new_index.template.json


#operators
[[ -n str_input ]] #checking string input is not null



#netcat
docker inspect [docker container NAME] 
nc.traditional -l "38003" -c "nc.tradditional 172.19.0.16 8080" #nc listens to the port 38003 and it writes what it heard through port 38003 to the host at 172.19.0.16.8080 


nc -l port1 | nc host port # this will listen to port1 then write the content it heard through the port 1 to the port of the host 

# port scanning
netcat -z -v domain.com 1-1000


#ssh tunneling notes
#Introduction
#local: -L Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.
#
ssh -L sourcePort:intermediate_host:onPort target_host
# means: connect with ssh to target_host, and forward all connection attempts to the local sourcePort to port onPort on the machine called intermediate_host, which can be reached from the target_host machine.
#
#remote: -R Specifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side.
#
ssh -R sourcePort:intermediate_host:onPort target_host
# means: connect with ssh to target_host, and forward all connection attempts to the remote sourcePort to port onPort on the machine called intermediate_host, which can be reached from your local machine.
#
#Additional options
#-f tells ssh to background itself after it authenticates, so you don't have to sit around running something on the remote server for the tunnel to remain alive.
#-N says that you want an SSH connection, but you don't actually want to run any remote commands. If all you're creating is a tunnel, then including this option saves resources.
#-T disables pseudo-tty allocation, which is appropriate because you're not trying to create an interactive shell.

#generalized format of ssh tunneling
#-L is read from left to right
#-R is read from right to left, like from intermediatehost tunnel the port host_of_receiving:port to the localhost with port host_of_initiation_port
ssh -L host_of_initiation_port:host_of_receiving:port intermediatehost
ssh -R host_of_initiation_port:host_of_receiving:port intermediatehost
#assume you want to map a local port 123 to remote server's port 456
ssh -L 123:remote_host:456 remotehost
#assume you want to map a remote server's port 456 to localhost's port 123
ssh -R 456:localhost:123 remote_host

#find which port is running by which application
sudo lsof -i -P -n | grep LISTEN

#curl with post
curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"username":"xyz","password":"xyz"}' \
  http://localhost:3000/api/login

#curl to write out status code
--write-out %{http_code}

#xargs, it need to use -I then variable name "var1" to pass it to function echo to use var1
echo 123|xargs -I var1 echo var1
#xargs only takes in 1 cmd and parameters, so we can use bash -c or sh -c to stuff entire pipeline cmd into it
find . -type d -name "*log*" | xargs -I {} sh -c "echo {}; ls -la {} | tail -2"

#check definition of a function, print a function definiton
type function_name



#prevent somebody ssh and source someone's bashrc file, this also make scp to be possible because it doesn't print out any message during login, so scp can work
case $- in
    *i*) ;;
      *) return;;
esac



#ssh config to ignore unkown host  (turn off known host verification)
Host 192.168.86.*
  StrictHostKeyChecking no
  UserKnownHostsFile=/dev/null


# ssh via a intermedia host to run a cmd
ssh -A -tt $host_user@$host_ip ssh -tt -q -o ConnectTimeout=5 lga256 "source /home/xiazi/.bashrc\;export PATH=$LGA_ENV_PATH\; export HOST_AGGR_PATH=/home/xiazi/projects/pulsepoint/aggr\&\&uname\&\&cd /home/xiazi/projects/pulsepoint/aggr\&\&source docker_run_tools.sh \&\& docker_run_dev lga bash"


# echo tab delimiter
echo $'\t'
# cut command with tab delimiter can be 
cut -d $'\t' -f 2-


# ssh multiplexing, ading by adding 3 lines starting with Control*
Host 192.168.1.*
  StrictHostKeyChecking no
  UserKnownHostsFile=/dev/null
  ControlPath ~/.ssh/cm-%r@%h:%p
  ControlMaster auto # this line enables the multiplexing
  ControlPersist 30m # this line will keep the connection alive for 30 minutes after idle



# screen copy text 
Enter scrollback mode using C-a [ or C-a ESC.
Press the space bar to begin selecting text.
Move the cursor using h,j,k,l,C-b,C-f or arrow keys/PGUP/PGDOWN.
Hit the space bar again to copy the selected text.
Hit ESC to exit scrollback mode.
Press C-a ] to paste.


# compare string equal
if [ "$x" = "valid" ]; then
  echo "x has the value 'valid'"
fi

# curl pipe to bash, curl to memory
curl -vs google.com 2>&1 | less

# multiple spaces deliminted 
ps axu | grep jbos[s] | tr -s ' ' | cut -d' ' -f5

# get last cmd pid
$!

# ifconfig not found, it is deprecated, use ip command
ip -a c


# print 00 .... 09
0{0..9}


# force 0 buffer for stdin stdout stderr
# stdbuf -i0 -o0 -e0 <command>
# i = stdin
# o = stdout
# e = stderr

# restart sshd in mac
# unload seems unnecesary for this case
sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
# use this stop is more appropriate
sudo launchctl stop com.openssh.sshd

# window is wrapping text correctly
shopt checkwinsize
#If you don't get
#
# checkwinsize    on
# Then activate it with
shopt -s checkwinsize

# use below ps1 to fix the issue of terminal command display issue
PS1='\e[01;32m\u:\e[01;34m\w\e[0m\$ '
# or use current ps1
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$'

# tsv to csv, tab to comma
sed 's/[[:space:]]\+/,/g'
# multiple spaces to one space
sed 's/  */ /g'

# grep non numerical, only match one
echo $Str | grep '[^0-9]'
# grep character at start of line
grep "^[a-z|A-Z]"

# get cpu counts
nproc


# linux history lookup previous/next
ctrl+r
#use ctrl + p to select previous


# tee stderr and stdout to different files
command > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)
# Let's split it up and explain:
> >(..)
# >(...) (process substitution) creates a FIFO and lets tee listen on it. Then, it uses > (file redirection) to redirect the STDOUT of command to the FIFO that your first tee is listening on.
#Same thing for the second:
2> >(tee -a stderr.log >&2)

# tee with grep
#!/bin/bash
ssh "$@" | tee >(grep -e '.*\@.*\:.*\$.*' --color=never >> test.log)

# exit script without closing existing shell
[ $PS1 ] && return || exit;
# OR
(exit 33)
# OR
[ "$BASH_SOURCE" == "$0" ] &&
    echo "This file is meant to be sourced, not executed" && 
        exit 30

return 88

# hex string to bytes and then send to netcat
echo '0006303030304e43' | xxd -r -p | nc -l localhost 8181

# list process and port
sudo netstat -tulpn

dig +short www.google.com # this cmd will give u ip of domain


# show timezone
timedatectl | grep "Time zone"
# check pid of a process
pgrep process_name

# inotifywait to watch for files changes
inotifywait -e modify -e access ./ && echo "1234" # this will monitor access and modify
# close_write is for write event


# Binary file (standard input) matches error for grep
# grep content as text
grep -a pattern1

# uncheck a committed deleted file
git reset -- file_name

# add user
adduser username1

# which creates a home directory for the user and ensures that bash is the default shell.
useradd -ms /bin/bash newuser
