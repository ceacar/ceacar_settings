#git clone repo
  git clone git@twxgit:fbd-professional-services


#git show all branches
  git show-branch


#git pull --rebase by default
  git config --global pull.rebase true


#add a missing file to last unpush commit
  edited file-that-i-remember.txt
  git add file-that-i-remember.txt
  git commit
  # realize you forgot a file
  git add file-that-i-forgot.txt
  git commit --amend --no-edit


#reset to last commit
  git reset --soft HEAD^


#git df commit_old comit_new, it will print old the change
git df specific_old_commit HEAD


#git bisect
1. git bisect start
2. git bisect bad commit_sha_of_not_working_commit
3. git bisect good commit_sha_of_a_working_one
4.git will perform a binary search of commit sha
5. each try, manually verify if the code runs correctly, if correct, type git bisect good, if not, type git bisect bad, git will automatically jump to next mid point


#git alias
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.df diff
git config --global alias.pr 'pull --rebase'
git config --global alias.lgb "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches"


#git 
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
#make git to use vim on commit
git config --global core.editor "vim"

git reflog#records all git activity and commmit sha


#git tags
git tag -a v1.4 -m "my version 1.4"
git push origin v1.4

#git skip all action that produces error
git mv -k * ./subDir

#rebase local branch on remote master
git pull --rebase origin master

#rebase a branch from an old branch to a new branch
git rebase --onto newBase oldBase feature/branch

#regret/revert a not pushed git rebase
git reset --hard ORIG_HEAD


#git always asks for passphrase/password
#this works for mac
This has been happening to me after restarts since upgrading from OS X El Capitan (10.11) to macOS Sierra (10.12). The ssh-add solution worked temporarily but would not persist across another restart.

The permanent solution was to edit (or create) ~/.ssh/config and enable the UseKeychain option.

Host *
    UseKeychain yes

#put below code in bashrc for linux
SSH_ENV=$HOME/.ssh/environment

# start the ssh-agent
    function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add
}

if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi

#linux solution, write your own function in bashrc
ssh-agent > ~/.ssh_agent_file
source ~/.ssh_agent_file
ssh-add 

if $is_linux;then
  if [ -z "$SSH_AUTH_SOCK" ] ; then
    automate_ssh_agent
  fi
fi


#git force push replacement --force-with-lease
#this force with lease will help you to avoid accidentally overwrite your coworkers code when doing force push like rebase to master

#git auto complete branch name
curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash




#git remote branch doesn't refresh, run below cmds
git fetch --all
git branch -r
git branch -a


# cherry pick a range of commits, commit_sha_1, is the first commit you want, commit_sha_2 is the last commit you want
## ^ is saying starts from (not inclusive) the commit before the commit_sha_1
git cherry-pick commit_sha_1^..commit_sha_2

# delete branch
git branch -D branch_name

# git bracnh show
git log --all --decorate --oneline --graph
