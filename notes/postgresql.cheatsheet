###PostgreSQL commands
# Access the PostgreSQL server from psql with a specific user:
psql -U [username];

# writes output to file1
\o file1
\o # type this again to get out writing mode

# write query result inside psql
COPY (SELECT foo, bar FROM baz) TO '/tmp/query.csv' (format csv, delimiter ';')

#Connect to a specific database:
\c database_name;

#To quit the psql:
\q

# List all databases in the PostgreSQL database server
\l

# List all schemas:
\dn
# List all stored procedures and functions:
\df

# List all views:
\dv
# Lists all tables in a current database.
\dt

# Or to get more information on tables in the current database:
\dt+

# Get detailed information on a table.
\d+ table_name

# Show a stored procedure or function code:
\df+ function_name

# Show query output in the pretty-format:
\x

# List all users:
\du

# Create a new role:
CREATE ROLE role_name;

# Create a new role with a username and password:
CREATE ROLE username NOINHERIT LOGIN PASSWORD password;

#Change role for the current session to the new_role:
SET ROLE new_role;

# Allow role_1 to set its role as role_2:
GRANT role_2 TO role_1;

## Managing databases
# Create a new database:
CREATE DATABASE [IF NOT EXISTS] db_name;
# Delete a database permanently:
DROP DATABASE [IF EXISTS] db_name;

## Managing tables
#Create a new table or a temporary table
CREATE [TEMP] TABLE [IF NOT EXISTS] table_name(
   pk SERIAL PRIMARY KEY,
   c1 type(size) NOT NULL,
   c2 type(size) NULL,
   ...
);

# Add a new column to a table:
ALTER TABLE table_name ADD COLUMN new_column_name TYPE;

# Drop a column in a table:
ALTER TABLE table_name DROP COLUMN column_name;

# Rename a column:
ALTER TABLE table_name RENAME column_name TO new_column_name;

#Set or remove a default value for a column:
ALTER TABLE table_name ALTER COLUMN [SET DEFAULT value | DROP DEFAULT]

# Add a primary key to a table.
ALTER TABLE table_name ADD PRIMARY KEY (column,...);

# Remove the primary key from a table.
ALTER TABLE table_name 
DROP CONSTRAINT primary_key_constraint_name;

# Rename a table.
ALTER TABLE table_name RENAME TO new_table_name;

# Drop a table and its dependent objects:
DROP TABLE [IF EXISTS] table_name CASCADE;

## Managing views

# Create a view:
CREATE OR REPLACE view_name AS
query;

# Create a recursive view:
CREATE RECURSIVE VIEW view_name(columns) AS
SELECT columns;

# Create a materialized view:
CREATE MATERIALIZED VIEW view_name
AS
query
WITH [NO] DATA;

# Refresh a materialized view:
REFRESH MATERIALIZED VIEW CONCURRENTLY view_name;

# Drop a view:
DROP VIEW [ IF EXISTS ] view_name;

# Drop a materialized view:
DROP MATERIALIZED VIEW view_name;

# Rename a view:
ALTER VIEW view_name RENAME TO new_name;

## Managing indexes
# Creating an index with the specified name on a table
CREATE [UNIQUE] INDEX index_name
ON table (column,...)

# Removing a specified index from a table
DROP INDEX index_name;
Querying data from tables
Query all data from a table:

1
SELECT * FROM table_name;
Query data from specified columns of all rows in a table:

1
2
SELECT column, column2â€¦.
FROM table;

# Query data and select only unique rows:
SELECT DISTINCT (column)
FROM table;

# Query data from a table with a filter:

SELECT *
FROM table
WHERE condition;
Assign an alias to a column in the result set:

1
2
SELECT column_1 AS new_column_1, ...
FROM table;
Query data using the LIKE operator:

1
2
SELECT * FROM table_name
WHERE column LIKE '%value%'
Query data using the BETWEEN operator:

1
2
SELECT * FROM table_name
WHERE column BETWEEN low AND high;
Query data using the IN operator:

1
2
SELECT * FROM table_name
WHERE column IN (value1, value2,...);
Constrain the returned rows with the LIMIT clause:

1
2
3
SELECT * FROM table_name
LIMIT limit OFFSET offset
ORDER BY column_name;
Query data from multiple using the inner join, left join, full outer join, cross join and natural join:

1
2
3
SELECT * 
FROM table1
INNER JOIN table2 ON conditions
1
2
3
SELECT * 
FROM table1
LEFT JOIN table2 ON conditions
1
2
3
SELECT * 
FROM table1
FULL OUTER JOIN table2 ON conditions
1
2
3
SELECT * 
FROM table1
CROSS JOIN table2;
1
2
3
SELECT * 
FROM table1
NATURAL JOIN table2;
Return the number of rows of a table.

1
2
SELECT COUNT (*)
FROM table_name;
Sort rows in ascending or descending order

1
2
3
SELECT column, column2, ...
FROM table
ORDER BY column ASC [DESC], column2 ASC [DESC],...;
Group rows using GROUP BY clause.

1
2
3
SELECT *
FROM table
GROUP BY column_1, column_2, ...;
Filter groups using the HAVING clause.

1
2
3
4
SELECT *
FROM table
GROUP BY column_1
HAVING condition;
Set operations
Combine the result set of two or more queries with UNION operator:

1
2
3
SELECT * FROM table1
UNION
SELECT * FROM table2;
Minus a result set using EXCEPT operator:

1
2
3
SELECT * FROM table1
EXCEPT
SELECT * FROM table2;
Get intersection of the result sets of two queries:

1
2
3
SELECT * FROM table1
INTERSECT
SELECT * FROM table2;
Modifying data
Insert a new row into a table:

1
2
INSERT INTO table(column1,column2,...)
VALUES(value_1,value_2,...);
Insert multiple rows into a table:

1
2
3
4
INSERT INTO table_name(column1,column2,...)
VALUES(value_1,value_2,...),
      (value_1,value_2,...),
      (value_1,value_2,...)...
Update data for all rows:

1
2
3
UPDATE table_name
SET column_1 = value_1,
    ...;
Update data for a set of rows specified by a condition in the WHERE clause.

1
2
3
4
UPDATE table
SET column_1 = value_1,
    ...
WHERE condition;
Delete all rows of a table:

1
DELETE FROM table_name;
Delete specific rows based on a condition:

1
2
DELETE FROM table_name
WHERE condition;
Performance
Show the query plan for a query:

1
EXPLAIN query;
Show and execute the query plan for a query:

1
EXPLAIN ANALYZE query;
Collect statistics:

1
ANALYZE table_name;


# create a sql dump
pg_dump dbname > outfile

# load a dump into sql
CREATE DATABASE drugcentral WITH TEMPLATE=template0; # you have to create a db first for loading the dump
psql dbname < infile

# dump from 1 db to another 
pg_dump -h host1 dbname | psql -h host2 dbname

# dump all dbs
pg_dumpall > outfile

# load from files to a db
psql -f infile postgres

# select first 10 records
SELECT * FROM TBL1


# copy a table to another db
pg_dump -t table_to_copy source_db | psql target_db

# cmd line of psql
psql "host=host1 user=user1 password=password1 port=port1"

psql --host=host1 --username=user1 --password=password1 --port=port1"

# create a database with a template
CREATE DATABASE drugcentral WITH TEMPLATE=template0;
