#!/bin/bash
docker run <image>
docker start <name|id>
docker stop <name|id>
docker ps [-a include stopped containers]
docker rm <name|id>
docker run -p 8080:80 #map the local host port 8080 to the docker's port 80
docker --name container_name #name the container
docker -d #run as daemon(background service)
docker build -t tag1 . #tag current image file as tag1
docker build -f file_path #it will build the docker with the config file at file_path
docker build -f file_path -t tag1 #tag the file specified as tag1
docker-compose -p project_name -f ./compose.base.pyapi-ws.yml up #put this config in different project name, if multiple container trying to use same port in same project, the latter will kill the previous one
docker run -t -i image_name #run the docker image in interactive mode
docker attach [CONTAINER_ID|CONTAINER_NAMES] #attched to terminal which is being used in the container specified
docker exec -i -t [CONTAINER_ID|CONTAINER_NAMES] /bin/bash #open a new terminal in the CONTAINER specified
docker run -it fbd-jenkins /bin/bash #run fbd-jenkins and open the interactive mode, if it is killed, container is killed
docker run -rm -ti tag_name /bin/bash #automatically remove the container tag_name upon exit



#docker without sudo
sudo groupadd docker
sudo gpasswd -a $USER docker
newgrp docker
docker run hello-world








#cmd example
docker-compose -p $PROJECT_NAME -f COMPOSE_FILE_PATH1 -F COMPOSE_FILE_PATH2 up --abort-on-container-exit
docker build -f $PWD/dockerfile -t tag_name .
#remove all exited docker container
docker rm $(docker ps -q -f status=exited)
#wipe out all the docker container
docker rm $(docker ps -a -q)
#remove all dangling docker images, dangling is a state where docker image is not used in anywhere
docker rmi $(docker images -f "dangling=true" -q)




#curling to update job in jenkins
#get the crumb which is used for authenticating 
ADMIN_PSWD=123124156gfjkglksdjthfks
CRUMB=$(curl -s 'http://admin:$ADMIN_PSWD@localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')
#test the connectivity
curl -X POST -H "$CRUMB" http://admin:$ADMIN_PSWD@localhost:8080
#get the job config
curl -X GET http://admin:$ADMIN_PSWD@localhost:8080/job/test1/config.xml -o mylocalconfig.xml
#use the job config to create a new job
curl -s -XPOST -H "$CRUMB" 'http://admin:$ADMIN_PSWD@localhost:8080/createItem?name=yourJobName' --data-binary @mylocalconfig.xml -H "Content-Type:text/xml"
#start to build the job
curl --user dbacher:$MY_API_TOKEN http://jenkins:8080/job/my%20job/build [ returns nothing and the build starts ]


#how to add credential to jenkins
#THIS CAN ALSO DONE BY JUST COPYING credentials.xml to $JENKINS_HOME 
curl -H $CRUMB -X POST 'http://user:token@jenkins_server:8080/credentials/store/system/domain/_/createCredentials' \
--data-urlencode 'json={
  "": "0",
  "credentials": {
    "scope": "GLOBAL",
    "id": "identification",
    "username": "manu",
    "password": "bar",
    "description": "linda",
    "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
  }
}'


#jenkins cli
#download the cli jar file
curl -O http://localhost:8080/jnlpJars/jenkins-cli.jar
#login as admin
java -jar "./jenkins-cli.jar" -s http://localhost:8080 who-am-i --username admin --password $ADMIN_PSWD
#help
java -jar jenkins-cli.jar -s http://localhost:8080 help --username admin --password $ADMIN_PSWD







#misc
curl -u user:pass \
	-X POST \
	-H "Accept: application/json" \
	-H "Content-Type: application/json" \
	http://stash.server/rest/keys/1.0/projects/PROJECT/ssh \
	-d '{"key": { "text": "ssh-rsa ...." }, "permission": "PROJECT_READ"}'


#
