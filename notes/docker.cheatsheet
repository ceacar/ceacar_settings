#install docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt-get update
apt-get install -y docker-ce docker-compose

#install docker-compose
curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose >/dev/null


docker run <image>
docker start <name|id>
docker stop <name|id>
docker ps [-a include stopped containers]
docker rm <name|id>
docker run -p 8080:80 #map the local host port 8080 to the docker's port 80
docker --name container_name #name the container
docker -d #run as daemon(background service)
docker build -t tag1 .  #tag current image file as tag1 and use . as path where the dockerfile is located
docker build -f file_path #it will build the docker with the config file at file_path
docker build -f file_path -t tag1 #tag the file specified as tag1
docker-compose -p project_name -f ./compose.base.pyapi-ws.yml up #put this config in different project name, if multiple container trying to use same port in same project, the latter will kill the previous one
docker run -t -i image_name #run the docker image in interactive mode
docker attach [CONTAINER_ID|CONTAINER_NAMES] #attched to terminal which is being used in the container specified
docker exec -i -t [CONTAINER_ID|CONTAINER_NAMES] /bin/bash #open a new terminal in the CONTAINER specified
docker run -it fbd-jenkins /bin/bash #run fbd-jenkins and open the interactive mode, if it is killed, container is killed
docker run -rm -ti tag_name /bin/bash #automatically remove the container tag_name upon exit



#docker without sudo
sudo groupadd docker
sudo gpasswd -a $USER docker
newgrp docker
docker run hello-world








#cmd example
docker-compose -p $PROJECT_NAME -f COMPOSE_FILE_PATH1 -F COMPOSE_FILE_PATH2 up --abort-on-container-exit
docker build -f $PWD/dockerfile -t tag_name .
#remove all exited docker container
docker rm $(docker ps -q -f status=exited)
#wipe out all the docker container
docker rm $(docker ps -a -q)
#remove all dangling docker images, dangling is a state where docker image is not used in anywhere
docker rmi $(docker images -f "dangling=true" -q)
# remove container by name
docker rm $(docker ps -a | grep $docker_name |awk -v FS='   +' '{print $6}')



#curling to update job in jenkins
#get the crumb which is used for authenticating 
ADMIN_PSWD=123124156gfjkglksdjthfks
CRUMB=$(curl -s 'http://admin:$ADMIN_PSWD@localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')
#test the connectivity
curl -X POST -H "$CRUMB" http://admin:$ADMIN_PSWD@localhost:8080
#get the job config
curl -X GET http://admin:$ADMIN_PSWD@localhost:8080/job/test1/config.xml -o mylocalconfig.xml
#use the job config to create a new job
curl -s -XPOST -H "$CRUMB" 'http://admin:$ADMIN_PSWD@localhost:8080/createItem?name=yourJobName' --data-binary @mylocalconfig.xml -H "Content-Type:text/xml"
#start to build the job
curl --user dbacher:$MY_API_TOKEN http://jenkins:8080/job/my%20job/build [ returns nothing and the build starts ]


#how to add credential to jenkins
#THIS CAN ALSO DONE BY JUST COPYING credentials.xml to $JENKINS_HOME 
curl -H $CRUMB -X POST 'http://user:token@jenkins_server:8080/credentials/store/system/domain/_/createCredentials' \
--data-urlencode 'json={
  "": "0",
  "credentials": {
    "scope": "GLOBAL",
    "id": "identification",
    "username": "manu",
    "password": "bar",
    "description": "linda",
    "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
  }
}'


#jenkins cli
#download the cli jar file
curl -O http://localhost:8080/jnlpJars/jenkins-cli.jar
#login as admin
java -jar "./jenkins-cli.jar" -s http://localhost:8080 who-am-i --username admin --password $ADMIN_PSWD
#help
java -jar jenkins-cli.jar -s http://localhost:8080 help --username admin --password $ADMIN_PSWD







#misc
curl -u user:pass \
	-X POST \
	-H "Accept: application/json" \
	-H "Content-Type: application/json" \
	http://stash.server/rest/keys/1.0/projects/PROJECT/ssh \
	-d '{"key": { "text": "ssh-rsa ...." }, "permission": "PROJECT_READ"}'


#



#######################docker compose#########################

#mapping port, Either specify both ports (HOST:CONTAINER), or just the container port (a random host port will be chosen).
mysql:
  image: mysql:5.7
  ports:
    - "33030:10000"

#Expose ports without publishing them to the host machine - they’ll only be accessible to linked services. Only the internal port can be specified.
mysql:
  image: mysql:5.7
  expose:
    - "3306"





#hack everything by mounting the volume as docker volume
docker run -v local_dir_path:container_dir_path -it ubuntu bash
example: docker run -v /var/lib/docker:/opt/docker -it ubuntu bash


#Know issue
  #docker and openvpn has conflicts
  #use sudo service openvpn stop
  #and then run docker compose

#in docker image run script as other user:
setuser other_user_name any_cmd_or_script


#use docker without sudo
sudo groupadd docker
sudo gpasswd -a $USER docker
newgrp docker #restart the group to activate newly added user


#install docker on mac
brew install docker-machine docker

#mac complain about docker daemon not running
docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
  #To have launchd start docker-machine now and restart at login:
  brew services start docker-machine
  #Or, if you don't want/need a background service you can just run:
  docker-machine start
  #create a default docker machine, need to have virtualbox is installed
  docker-machine create --driver virtualbox default
  #connect to your default docker machine
  eval "$(docker-machine env default)"
  #test with below command
  docker run busybox echo hello world

#mac list docker machines
docker-machine ls


#mac find docker default ip address ( this is different from linux, because mac docker is actually virtualbox image that is running, this image has its own ip address so, if you see in dockerps 35100 -> 5000tcp, this is actually docker machine's ip with 35100 port which points to internal 5000 port of docker machine
docker-machine ip default


#how docker runs entrypoint, overwrite entrypoint
docker run -p 38888:5000 --entrypoint "/bin/sleep" -it registry.pulsepoint.com/report-api:added_column_name_as_header  10000000 #this command added sleep 1000000 to it, but it is written in a way of separated, due to how the docker works.


# want to access file after docker exit
docker cp <container_id>:/root/hello.txt .
you can get container_id by run “docker ps -a”
theoretically docker saves the file even after it exited


# attach to intermediate docker images during the built process
  # This command will:
  # Run the specified Docker image — bf6d2fd8e919.
  # Keep STDIN open even if not attached (-i flag).
  # Allocate a pseudo-tty (-t flag).
  # Automatically clean up the container and remove the file system when the container exits (--rmflag). This is optional.
  # Run the bash command inside of the container.
docker run --rm -it bf6d2fd8e919 bash

















################DOCKER FILE SYNTAX###############
#
#
1. escape
# escape=\ (backslash)
# Or
# escape=` (backtick)
# The escape directive sets the character used to escape characters in a Dockerfile. If not specified, the default escape character is \.
2. env
# set up env var
# ENV abc=hello
# ENV abc=bye def=$abc
# ENV ghi=$abc

3. .dockerignore file
similar to gitignore, it will filter files when using add copy cmd to ship files in to container image
#Here is an example .dockerignore file:
# comment
*/temp*
*/*/temp*
temp?

4. ARG set and variable
example:
ARG VERSION=latest
RUN echo $VERSION > image_version

4. FROM imagea AS alias_name_for_image
ARG VERSION=latest
FROM busybox:$VERSION
# ARG after FROM is cleared

5. RUN

6. CMD
#The CMD instruction has three forms:
#
#CMD ["executable","param1","param2"] (exec form, this is the preferred form)
#CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
#CMD command param1 param2 (shell form)
#There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.
#
#The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.

#exmaple:
#CMD echo "This is a test." | wc -
#CMD ["/usr/bin/wc","--help"]


7. ENTRYPOINT
#below will run like one cmd top -b -c when start container
#FROM ubuntu
#ENTRYPOINT ["top", "-b"]
#CMD ["-c"]

8. LABEL
#LABEL is comment for container
#LABEL <key>=<value> <key>=<value> <key>=<value> ...
#The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing. A few usage examples:
#
#LABEL "com.example.vendor"="ACME Incorporated"
#LABEL com.example.label-with-value="foo"
#LABEL version="1.0"
#LABEL description="This text illustrates \
#that label-values can span multiple lines."

9. EXPOSE
EXPOSE <port> [<port>/<protocol>...]
EXPOSE 80/tcp
EXPOSE 80/udp
EXPOSE 80
docker run -p 80:80/tcp -p 80:80/udp ...

10. ADD
# same as copy, but it can be a url, and if it is a zip file , it will extract it
# ADD
# ADD has two forms:
# 
# ADD [--chown=<user>:<group>] <src>... <dest>
# ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]

# ADD hom* /mydir/        # adds all files starting with "hom"
# ADD hom?.txt /mydir/    # ? is replaced with any single character, e.g., "home.txt"

11. COPY
# similar to add, but only used to copy directory from host to docker image

12.WORKDIR
# it will mkdir -p this dir and cd to it for following cmd

#################END OF DOCKER FILE SYNTAX#######




# container cannot run ulimit cmd
add either of below options into docker run cmd
--cap-add sys_resource  # guess this will add a cap of ulimit as system resource limit
--privileged # guess this gives permission for container to run restricted cmds

