#!/bin/bash
PHONE_URL_USB="localhost"
PHONE_PORT_USB=8022
PHONE_DEFAULT_USERNAME="u0_a213"
TEMP_PATH=~/temp

if [ ! -d "$TEMP_PATH" ];then
  mkdir -p "$TEMP_PATH"
fi

function cl() {
  cd "$@" && ls;
}

function newdir(){
  local dir_name=$1
  mkdir $dir_name
  cd $dir_name
}


function append_to_history(){
   h=$(history 1 | sed 's/[ ]*[0-9]*[ ]*//')
   t=$(tty)
   d=$(date '+%Y%m%d %H:%M:%S')
   { [ "$LAST_HISTORY_LINE" = "$h" ] || echo $t $d $h;} | awk 'length($0)<1000{print}' >> ~/.persistent_history
   LAST_HISTORY_LINE=$h
}

export PROMPT_COMMAND=append_to_history

function breakToLines(){
  local everyXCharacters=$1
  sed -e "s/.\{$everyXCharacters\}/&\n/g"
}

function killZombies(){
  kill $(ps -A -ostat,ppid | awk '/[zZ]/{print $2}')
}

function psSerialKiller(){
  signature=$1
  if [ "$signature" == "-t" ]
  then
    ps aux|grep "$2"
  else
    echo "killing these process"
    ps aux |grep "$signature"
    kill $(ps aux |grep "$signature" |awk '{print $2}')
  fi
}


#!/bin/bash

function error(){
  echo $1
  return 1
}

function executeRemoteCmd(){
  [[ "$1" == "-h" ]] && { echo "$FUNCNAME [ip] [user_name]";return 1; }
  local ip=${1:?ip not set in $FUNCNAME}
  local user_name=${2:?user_name not set in $FUNCNAME}
  local cmd=${3:?cmd not set in $FUNCNAME}
  # ssh -q -o ConnectTimeout=2 $user_name@$ip $cmd
  ssh -i $HOME/projects/pulsepoint/pp_notes/id_rsa -o ConnectTimeout=2 $user_name@$ip $cmd
}

function shipMyProjects(){
  local shared_dir_with_remote=${SHARED_DIR:?SHARED_DIR is not setup in $FUNCNAME}
  local default_ip=${DEFAULT_REMOTE_IP_FOR_UPLOADING:?DEFAULT_REMOTE_IP_FOR_UPLOADING is not set in $FUNCNAME}
  local default_user=${DEFAULT_REMOTE_USER_FOR_UPLOADING:?DEFAULT_REMOTE_USER_FOR_UPLOADING is not set in $FUNCNAME}
  local ip=${1:-$default_ip}
  local user_name=${2:-$default_user}
  for path_temp in $SHARED_DIR;do
    executeRemoteCmd $ip $user_name "mkdir -p ~/$path_temp"
    echo "rsync -e 'ssh -q' -az ~/$path_temp/ $user_name@$ip:~/$path_temp/"
    rsync -e 'ssh -q' -az ~/$path_temp/ $user_name@$ip:~/$path_temp/
  done
}

function deploy_instance(){(
  set -fueo pipefail
  local ip=${1:?ip not set in $FUNCNAME}
  local user_name=${2:?user_name not set in $FUNCNAME}
  shipMyProjects $ip $user_name
  echo "source code copied"
  echo "copying config files"
  executeRemoteCmd $ip $user_name "sudo chmod 770 ~/config/xiazi/init_xiazi_host"
  executeRemoteCmd $ip $user_name "sudo ~/config/xiazi/init_xiazi_host"
  echo "host config files copied"
  executeRemoteCmd $ip $user_name "sudo chmod 770 ~/config/xiazi/aws_toolkit/*" || error "aws toolkit copy failed"
  echo "aws toolkit ready"
  executeRemoteCmd $ip $user_name "sudo apt-get install pypy -y" >/dev/null 2>&1 || error "pypy installation failed"
  echo "installing pypy"
  executeRemoteCmd $ip $user_name "sudo apt-get install parallel -y" >/dev/null 2>&1 || error "pypy install failed"
  echo "installing git"
  executeRemoteCmd $ip $user_name "sudo apt-get install git -y" >/dev/null 2>&1 || error "pypy install failed"
  echo "making pypy symbolic links"
  executeRemoteCmd $ip $user_name "sudo ls /opt/bin || sudo mkdir /opt/bin/" >/dev/null 2>&1 || error "/opt/bin failed"
  echo "/opt/bin dir created"
  executeRemoteCmd $ip $user_name "ls /$user_name/temp || mkdir /$user_name/temp/" >/dev/null 2>&1 || error "/$user_name/temp creation failed"
  echo "copying /opt/bin"
  rsync -rLz /opt/bin/ $user_name@$ip:/$user_name/temp/
  echo "copied"
  executeRemoteCmd $ip $user_name "rm /$user_name/temp/pypy" >/dev/null 2>&1 || error "external pypy remove failed"
  executeRemoteCmd $ip $user_name "sudo cp -R /$user_name/temp/* /opt/bin/" >/dev/null 2>&1 || error "content moving to /opt/bin failed"
  echo "/opt/bin ready"
  executeRemoteCmd $ip $user_name "sudo rm -rf /opt/bin/pypy || sudo ln -s /usr/bin/pypy /opt/bin/pypy" >/dev/null 2>&1 || error "pypy symbolic link failed"
  echo "pypy ready"
  executeRemoteCmd $ip $user_name "sudo ls /usr/bin/expect || sudo apt-get install expect -y" >/dev/null 2>&1 || error "expect installation failed"
  echo "expect ready"
  #install vundle
  echo "installing vundle"
  executeRemoteCmd $ip $user_name "ls ~/.vim/bundle/Vundle.vim || git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim" >/dev/null 2>&1 || error "vundle installation failed"
  #echo "vundle doing PluginInstall"
  #executeRemoteCmd $ip $user_name "sudo vim -c 'PluginInstall' -c 'qa!'" >/dev/null 2>&1 || error "vundle installation failed"
  echo "increase file upper limit" && executeRemoteCmd $ip $user_name "sudo ~/config/xiazi/aws_toolkit/increase_file_upper_limit" >/dev/null
  executeRemoteCmd $ip $user_name "sudo reboot" && echo "rebooting host"
  secs=90
  echo "waiting $secs seconds for host to reboot"
  while [ $secs -gt 0 ]; do
    echo -ne "$secs\033[0K\r"
    sleep 1
    : $((secs--))
  done
  echo "initializing host"
  executeRemoteCmd $ip $user_name "sudo ~/config/xiazi/aws_toolkit/init_host" >/dev/null
  executeRemoteCmd $ip $user_name "sudo chown -R ubuntu:ubuntu /scratch" >/dev/null
  echo "/scratch attached"
  echo "host ready"
)}

function tmuxlunch(){
  ~/.tmux_lunch
}

function tmuxkillall(){
  tmux kill-session
}

function make_partition_aws_instance(){
  mkfs.ext4 -m 0 /dev/xvdd
  mkdir /scratch
  mount -t ext4 /dev/xvdd /scratch
  chmod 1777 /scratch
  apt-get install -y pypy lzop
  ln -snf $(which pypy) /opt/bin/pypy
}

function diff_to_vimdiff(){
  file_name=${1:?file_name empty}
  vimdiff <(zcat $file_name | grep ^+ | cut -c 2-) <(zcat $file_name | grep ^- | cut -c 2-)
}

function digtunnel(){
  local port=${1:?port not set}
  local host=${2:-dev002}
  echo "running ---> ssh -L $port:localhost:$port interbox source sgent\; ssh -L $port:localhost:$port $host"
  ssh -L $port:localhost:$port interbox source sgent\; ssh -L $port:localhost:$port $host
}

function sourcepython(){
    source ~/.venv/my_python_venv/bin/activate
    export PYTHONPATH="$PYTHONPATH:/Users/ceacar/projects/sunfish:"
}

function sourcepython3(){
    source ~/.venv/my_python_venv3/bin/activate
}

function git_push_to_branch(){
  branch_name=$(git branch | grep \*|sed -e 's/\* //g')
  git push origin $branch_name
}

function git_pull_to_branch(){
  branch_name=$(git branch | grep \*|sed -e 's/\* //g')
  git pull origin $branch_name
}

function docker_attach_to_container(){
  docker_name=${1:?docker_container_id_empty}
  sudo docker exec -it $docker_name bash
}

function source_ssh_agent(){
  ls $HOME/.ssh_agent_socket >/dev/null 2>&1 || ssh-agent > $HOME/.ssh_agent_socket
  source $HOME/.ssh_agent_socket
  #use ssh-add to test if ssh agent is running or not
}

function regen_ssh_agent(){
  ssh-agent > $HOME/.ssh_agent_socket
  source_ssh_agent
}

function docker_startup_mac(){
  docker-machine ls >/dev/null 2>&1 || {
    echo "docker-machine default is not running, starting a new one"
    docker-machine start 
  }
}

function ssh_my_phone_from_usb(){
  adb forward tcp:8022 tcp:8022
  ssh $PHONE_URL_USB -p $PHONE_PORT_USB
}

function _copy_to_my_phone_via_usb(){
  local path_from=${1:?path_from empty}
  local path_to=${2:?path_to empty}
  scp -C -r -P $PHONE_PORT_USB "$path_from" $PHONE_DEFAULT_USERNAME@$PHONE_URL_USB:"$path_to"
}

function _copy_dir_to_my_phone_via_usb(){
  local path_from=${1:?path_from empty}
  local path_to=${2:?path_to empty}
  scp -C -r -P $PHONE_PORT_USB "$path_from" $PHONE_DEFAULT_USERNAME@$PHONE_URL_USB:"$path_to"
}

function copy_to_my_phone_via_usb(){
  local path_to_copy=${1:?path_to_copy empty in $FUNCNAME}
  _copy_to_my_phone_via_usb $path_to_copy $path_to_copy
}

function copy_to_my_phone_sdcard_music_via_usb(){
  local path_to_copy=${1:?path_to_copy empty in $FUNCNAME}
  _copy_to_my_phone_via_usb $path_to_copy /sdcard/Music/
}

function copy_dir_to_my_phone_sdcard_music_via_usb(){
  local path_to_copy=${1:?path_to_copy empty in $FUNCNAME}
  _copy_dir_to_my_phone_via_usb $path_to_copy /sdcard/Music/
}
function copy_from_my_phone_via_usb(){
  local path_to_copy=${1:?path_to_copy empty in $FUNCNAME}
  scp -C -r -P $PHONE_PORT_USB $PHONE_DEFAULT_USERNAME@$PHONE_URL_USB:$path_to_copy ./
}

function ide_py2(){
  ctags -R .
  sourcepython
  vim $@
}

function ide_py3(){
  ctags -R .
  sourcepython3
  vim $@
}

function update_host_ip_to_phone(){
  echo "$(ifconfig | grep "inet " | grep -v 127.0.0.1 | awk -v FS=' +' '{print $3}'| head -1)" > /tmp/host_ip
  echo "$USER" > /tmp/host_username
  _copy_to_my_phone_via_usb /tmp/host_ip '~/.config/misc'
  _copy_to_my_phone_via_usb /tmp/host_username '~/.config/misc'
}

function update_host_ip_to_phone_mac(){
  echo "$(ifconfig |grep inet|grep 192|awk -v FS=' +' '{print $2}'|head -1)" > /tmp/host_ip
  echo "$USER" > /tmp/host_username
  _copy_to_my_phone_via_usb /tmp/host_ip '~/.config/misc'
  _copy_to_my_phone_via_usb /tmp/host_username '~/.config/misc'
}

function update_host_info(){
  export host_ip="$(cat ~/.config/misc/host_ip)"
  export host_user="$(cat ~/.config/misc/host_username)"
}

function backup_ubuntu_terminal_theme(){
  dconf dump /org/gnome/terminal/legacy/profiles:/ > $ceacar_setting/configs/ubuntu_terminal/work_profile.dconf
  dconf dump /org/gnome/desktop/wm/keybindings/ > $ceacar_setting/configs/ubuntu_terminal/key_binding.dconf
}

function reload_ubuntu_terminal_theme(){
  dconf load /org/gnome/terminal/legacy/profiles:/ < $ceacar_setting/configs/ubuntu_terminal/work_profile.dconf
  dconf load /org/gnome/desktop/wm/keybindings/ < $ceacar_setting/configs/ubuntu_terminal/key_binding.dconf
}

function attach_my_dev_container(){
  local first_container_match="$(docker ps |grep '9.9.999-DEV'|head -1|cut -d ' ' -f1)"
  if [[ ! "$first_container_match" ]];then
    echo "no dev docker found, spinning up new one"
    docker_run_dev lga bash
  else
    docker exec -it $(docker ps |grep '9.9.999-DEV'|head -1|cut -d ' ' -f1) bash
  fi
}
