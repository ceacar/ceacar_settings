#!/bin/bash
#set -u will complain empty PS1
# set -xv
export PS1="$PS1"
# set -fueo pipefail
user_name=${1:-$(whoami)}
is_linux=false
is_mac=false
#is_cygwin=false
is_unknown=false
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     export is_linux=true;;
    Darwin*)    export is_mac=true;;
    #CYGWIN*)    export is_cygwin=true;;
    *)          export is_unknown="UNKNOWN:${unameOut}"
esac

root_path=~

if $is_linux;then
  root_path="/home/$user_name"
fi

#put everything in projects
log_file=/tmp/init_host.txt
projects_location=$root_path/projects
python_venv_locations=$root_path/.venv
setting_path=$projects_location/ceacar_settings
ls $projects_location >/dev/null 2>&1 || mkdir -p $projects_location
cd $projects_location

config_path=$setting_path/configs
package_list_path=$config_path/packages
linux_package_path=$config_path/packages/linux
mac_package_path=$config_path/packages/mac
venv_package_path=$config_path/packages/venv
tmp_bak_path=$projects_location/bak


function enable_python3_for_centos() {
  cat /etc/os-release | grep "CentOS" >/dev/null && scl enable rh-python36 bash
}

function make_essential_path(){
  echo "creating essential path"
  sudo -u $user_name mkdir -p $tmp_bak_path
  sudo -u $user_name mkdir -p $root_path/.vim/
  sudo -u $user_name mkdir -p $root_path/.venv
}

function move_old_config_to_bak(){
  echo "moving old config to $tmp_bak_path"
  ls $root_path/.bashrc 2>/dev/null && mv $root_path/.bashrc $tmp_bak_path/bashrc
  ls $root_path/.vimrc 2>/dev/null && mv $root_path/.vimrc $tmp_bak_path/vimrc
  ls $root_path/.tmux.conf 2>/dev/null && mv $root_path/.tmux.conf $tmp_bak_path/tmux.conf
  ls $root_path/.screenrc 2>/dev/null && mv $root_path/.screenrc $tmp_bak_path/screenrc
  ls $root_path/notes 2>/dev/null && mv $root_path/notes $tmp_bak_path/notes || echo ""
}

function replace_config_files(){
  echo "symbolic linking config files"
  sudo -u $user_name ln -snf $config_path/bashrc $root_path/.bashrc
  sudo -u $user_name ln -snf $config_path/bash_aliases $root_path/.bash_aliases
  sudo -u $user_name ln -snf $config_path/bash_home_brew_script $root_path/.bash_home_brew_script
  sudo -u $user_name ln -snf $config_path/bash_dir_path$root_path/.bash_dir_path
  sudo -u $user_name ln -snf $config_path/vimrc $root_path/.vimrc
  sudo -u $user_name ln -snf $config_path/vimrc_ide $root_path/.vimrc_ide
  sudo -u $user_name ln -snf $config_path/tmux.conf $root_path/.tmux.conf
  sudo -u $user_name ln -snf $config_path/screenrc $root_path/.screenrc
  sudo -u $user_name ln -snf $config_path/vim_colors $root_path/.vim/colors
  sudo -u $user_name ln -snf $config_path/notes $root_path/notes
  sudo -u $user_name ln -snf $config_path/tmux_launch $root_path/.tmux_launch
  sudo -u $user_name ln -snf $config_path/git-completion.bash $root_path/.git-completion.bash
}

function set_config_files_permission(){
  echo "setting permission for config files"
  chmod +x $root_path/.tmux_launch
}

function set_mac_config(){
  echo "setting mac bash config"
  #enable auto load bashrc, mac only
  sudo -u $user_name touch $root_path/.bash_profile
  cat $root_path/.bash_profile | grep "source $root_path/.bashrc" >/dev/null || echo "source $root_path/.bashrc" >> $root_path/.bash_profile
}

function set_linux_config(){
  echo "setting linux config"
  #disable interactive apt-get confirmation
  ls /etc/apt/listchanges.conf 2>/dev/null && sed -i s/frontend=pager/frontend=none/g /etc/apt/listchanges.conf
  #disable interactive confirmation during install application proess
  export DEBIAN_FRONTEND=noninteractive
}

function clone_git_repos(){
  echo "cloning needed repos"
  #clone git repo frequently used
  sudo -u $user_name ls $projects_location/utility >/dev/null 2>/dev/null || git clone https://github.com/ceacar/utility.git $projects_location/utility
  sudo -u $user_name ls $projects_location/albert_practice >/dev/null 2>/dev/null || git clone https://github.com/ceacar/albert_practice.git $projects_location/albert_practice
  sudo -u $user_name ls $projects_location/excalibur >/dev/null 2>/dev/null || git clone https://github.com/ceacar/excalibur.git $projects_location/excalibur
}

function install_packages_from_file(){
  local file_name=$1
  local install_cmd=$2
  cat $file_name\
    | grep -v "#" \
    | while read pak;do
	eval "$install_cmd $pak"
      done
}

function install_linux_essential_packages(){
  echo "installing linux essential packages"
  apt-get update
  install_packages_from_file $linux_package_path/requirements.apt "apt-get -y install"
  install_packages_from_file $linux_package_path/requirements.txt "pip install --ignore-installed"
  install_packages_from_file $linux_package_path/requirements.txt3 "pip3 install --ignore-installed"
}

function install_conda(){
  echo "installing conda"
  sudo -u $user_name ls $root_path/anaconda >/dev/null 2>&1 && rm -rf $root_path/anaconda
  if $is_mac;then
    sudo -u $user_name $(alias md5="md5sum";wget https://repo.anaconda.com/archive/Anaconda3-2018.12-MacOSX-x86_64.sh -O $root_path/anaconda.sh &&\
    bash $root_path/anaconda.sh -b -p $root_path/anaconda)
  fi

  if $is_linux;then
    sudo -u $user_name $(alias md5="md5sum";wget https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh -O $root_path/anaconda.sh &&\
    bash $root_path/anaconda.sh -b -p $root_path/anaconda)
  fi

  #export PATH="$root_path/anaconda/bin:$PATH"
}

function install_mac_essential_packages(){
  #brew cannot run in sudo mode
  sudo -u $user_name brew help >/dev/null 2>/dev/null || echo 'please install brew /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
  sudo -u $user_name brew update

  cat $mac_package_path/requirements.apt\
    | grep -v "#" \
    | while read pak;do
	sudo -u $user_name brew list $pak >/dev/null 2>&1 || { sudo -u $user_name brew install $pak || echo "failed to install essential apps through brew"; }
      done

  install_packages_from_file $mac_package_path/requirements.txt "pip install --ignore-installed"
  install_packages_from_file $mac_package_path/requirements.txt3 "pip install --ignore-installed"
}


function config_vim(){
  # TODO: add mac support
  #mac way of installing youcompelte me 
  #brew install cmake
  #cd ~/.vim/bundle
  #git clone https://github.com/Valloric/YouCompleteMe.git
  #mkdir YouCompleteMe/ycmbuild
  #cd YouCompleteMe/ycmbuild
  #git submodule update --init --recursive
  #cmake -G "Unix Makefiles" . ~/.vim/bundle/YouCompleteMe/cpp/
  #make ycm_core

  echo "configuring vim"
  sudo -u $user_name ls $root_path/.vim/bundle/Vundle.vim 2>/dev/null || git clone https://github.com/VundleVim/Vundle.vim.git $root_path/.vim/bundle/Vundle.vim
  #change permission of the directory so vim could install everything when other user need it

  #install for vim
  sudo -u $user_name vim -c 'PluginInstall' -c 'qa!'

  sudo -u $user_name ls ~/.vim/bundle/YouCompleteMe >/dev/null|| git clone https://github.com/Valloric/YouCompleteMe.git $root_path/.vim/bundle/YouCompleteMe

  chown -R $user_name: ~/.vim
  #compile you completeme
  cd $root_path/.vim/bundle/YouCompleteMe

  # add more support if needed for YouCompleteMe
  # C# support: install Mono and add --cs-completer when calling install.py.
  # Go support: install Go and add --go-completer when calling install.py.
  # JavaScript and TypeScript support: install Node.js and npm and add --ts-completer when calling install.py.
  # Rust support: add --rust-completer when calling install.py.
  # If your Python interpreter is older than 2.7.9, you will also need rustup in your PATH.
  # Java support: install JDK8 (version 8 required) and add --java-completer when calling install.py.
  sudo -u $user_name ./install.py --clang-completer --go-completer --java-completer

  #overwrite the default vim to vim.nox
  #ln -snf $(which vim.nox) /usr/local/bin/vim
  #chmod -R 755 ~/.vim
}

function set_git_config(){
  echo "setting git config"
  #git alias
  sudo -u $user_name $config_path/git_alias
  #git username
  sudo -u $user_name $config_path/git_username
  #install git auto completion script
  sudo -u $user_name curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
}

function reinstall_vim(){
  # make sure you have sudo permission
  echo "reinstalling vim"
  ls $root_path/projects/vim 2>/dev/null || git clone https://github.com/vim/vim.git $root_path/projects/vim
  cd $root_path/projects/vim 

  #new vim cannot work with python 2 and python 3, so picking python 3
  ./configure \
    --with-features=huge \
    --enable-multibyte\
    --enable-rubyinterp=yes\
    --enable-python3interp=yes\
    --with-python3-config-dir=/usr/lib/$(ls -al /usr/lib/ |grep python3 | head -1 |awk '{print $9}')/config\
    --enable-perlinterp=yes\
    --enable-luainterp=yes\
    --enable-gui=gtk2\
    --enable-cscope\
    --prefix=/usr/local\
  make install
}

function setup_python_venv(){
  echo "creating python venv"
  sudo -u $user_name pip >/dev/null 2>/dev/null || easy_install pip >$log_file 2>&1
  sudo -u $user_name virtualenv >/dev/null 2>/dev/null || pip install virtualenv >$log_file 2>&1
  sudo -u $user_name virtualenv $python_venv_locations/my_python_venv >$log_file 2>&1
  sudo -u $user_name virtualenv -p $(which python3) $python_venv_locations/my_python_venv3 >$log_file 2>&1
  echo "installing packages for venv"
  source $python_venv_locations/my_python_venv/bin/activate
  install_packages_from_file $venv_package_path/requirements.txt "pip install --ignore-installed"
  install_packages_from_file $venv_package_path/requirements.txt3 "pip install --ignore-installed"
  deactivate
  chown -R $user_name: $python_venv_locations/

  source $python_venv_locations/my_python_venv3/bin/activate
  install_packages_from_file $venv_package_path/requirements.txt "pip install --ignore-installed"
  install_packages_from_file $venv_package_path/requirements.txt3 "pip install --ignore-installed"
  deactivate
  chown -R $user_name: $python_venv_locations/
}

function config_ipython(){
  echo "configuring ipython"
  #create ipython profile dir in $root_path/.ipython
  ipython profile create
  #adding auto reload enable by default to ipython
  echo -e "c.InteractiveShellApp.extensions = ['autoreload']\nc.InteractiveShellApp.exec_lines = ['%autoreload 2']\nc.InteractiveShellApp.exec_lines.append('print("Warning: disable autoreload in ipython_config.py to improve performance.")')" >> $root_path/.ipython/profile_default/ipython_config.py
}

function prepare_vim_color_scheme(){
  ls $root_path/.vim/colors 2>/dev/null || mv $tmp_bak_path/.vim/colors 
  ln -snf $config_path/vim_colors $root_path/.vim/colors
}

function install_aws_on_mac(){
  cd /tmp
  curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
  sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
  cd -
}

function config_flake8(){
  #make flake8 check to allow long python lines, this made life easier and code more readable
  mkdir -p ~/.config
  touch ~/.config/flake8
  echo "[flake8]" >> ~/.config/flake8
  echo '"max-line-length" = 120' >> ~/.config/flake8
}

function config_ipython_history(){
  mkdir -p $(ipython locate profile)/startup
  ln -snf $config_path/ipython_keep_history.py $(ipython locate profile)/startup/log_history.py
}

function set_up_tmux_tpm_plugin(){
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  ~/.tmux/plugins/tpm/scripts/install_plugins.sh
}

function initialize_host(){
  #enable python3 for centos
  #enable_python3_for_centos

  if $is_linux;then
    set_linux_config
  fi

  make_essential_path
  move_old_config_to_bak
  replace_config_files
  set_config_files_permission

  if $is_mac;then
    set_mac_config
    #brew doesn't run in sudo mode
    install_mac_essential_packages
  fi

  if $is_linux;then
    install_linux_essential_packages
    echo "linux packages installed"
  fi

  set_git_config
  clone_git_repos

  if $is_linux;then
    reinstall_vim
    echo "vim reinstalled"
  fi

  #setup_python_venv
  config_ipython
  prepare_vim_color_scheme
  install_conda
  #this config_vim is install you complete me, may fail
  config_vim

  # config ipython to keep history
  config_ipython_history
  cd -
}
